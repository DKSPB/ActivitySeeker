# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 6.0.x
    - name: Set up dependency caching for faster builds
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    # - name: install dotnet ef tool
    #   run: dotnet tool install dotnet-ef --version 6.*

    - name: Build with dotnet
      run: dotnet build --configuration Release

    - name: dotnet publish
      run: dotnet publish -c Release -o myapp

    - name: build dotnet ef migration bundle
      run: dotnet ef migrations bundle --target-runtime linux-x64 --configuration Bundle -o myapp/efbundle --verbose

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v4
      with:
        name: .net-app
        path: myapp

    - name: Deploy to Staging server
      uses: easingthemes/ssh-deploy@main
      with:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        ARGS: "-rlgoDzvc -i"
        SOURCE: "myapp/"
        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        REMOTE_USER: ${{ secrets.REMOTE_USER }}
        TARGET: "/opt/activity_seeker"
        # EXCLUDE: "/dist/, /node_modules/"
        SCRIPT_BEFORE: |
          systemctl stop bot
        SCRIPT_AFTER: |
          cat << EOF
          {
            "Logging": {
              "LogLevel": {
                "Default": "Information",
                "Microsoft.AspNetCore": "Warning"
              }
            },
            "AllowedHosts": "*",
            "BotConfiguration": {
              "BotToken": "__ITS_A_SECRET_",
              "WebhookUrl": "__ITS_A_SECRET_",
              "PathToCertificate": "/opt/activity_seeker/fullchain.crt"
            },
            "ConnectionStrings": {
              "ActivitySeekerConnection": "Host=${{ secrets.REMOTE_HOST }};Port=5432;Database=activity_seeker;Username=postgres;Password=__ITS_A_SECRET_;Include Error Detail=true;"
            }
          }
          EOF
          chown -R root:root /opt/activity_seeker/
          systemctl restart bot
